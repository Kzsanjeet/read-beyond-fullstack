generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String    @unique
  password           String
  avatar             String?
  contact            String
  lastFivePassword   String[]
  twoFAEnabled       Boolean
  otp                String?
  otpTimestamp       DateTime?
  wrongPasswordCounter Int
  isPassBlockEnabled Boolean
  refreshToken       String?
  createdAt          DateTime  @default(now())
}
 
model Superuser{
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String    
  avatar   String @default("")
  contact  String     @default("")
  lastFivePassword String[] @default([])
  twoFAEnabled Boolean @default(false)
  wrongPassCounter Int @default(0)
  isPassBlockEnabled Boolean @default(false)
  refreshToken String @default("")
  otp String @default("")
  createdAt DateTime @default(now())
 }
 
model provider{
  id       Int       @id @default(autoincrement())
  name     String
  email    String
  password String    @default("")
  avatar String      @default("")
  contact String     @default("")
  address String

  providerType String
  documentImage String @default("")
  documentImagId String

  verified Boolean @default(false)
  status String @default("pending")
  createdAt DateTime   @default(now())
  lastFivePasswords String[] @default([])
  twoFAEnabled Boolean @default(false)
  wrongPasswordCounter Int @default(0)
  isPassBlockEnabled Boolean @default(false)
  isFirstLogin Boolean @default(false)
  refreshToken String @default("")
  otp String @default("")
  // One-to-many relation with AddCourse
  courses           AddCourse[] // One provider can have multiple courses
}
model AddCourse {
  id               Int      @id @default(autoincrement())
  title            String
  category         String
  description      String
  instructor       String
  price            Int      @default(0)
  course_time      String
  likes            Int      @default(0)
  student_enrolled Int      @default(0)
  slug             String
  course_view      Int      @default(0)
  course_level     String
  language         String
  isPaid           Boolean  @default(false)
  registered_user  Int[]    
  providerId       Int      // Foreign key to the provider
  
  // Relation with provider
  provider         provider @relation(fields: [providerId], references: [id],onDelete: Cascade) 
}
